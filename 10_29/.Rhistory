# Load necessary libraries
library(haven)  # for reading .dta files
library(dplyr)  # for data manipulation
library(tidyr)  # for reshaping data
library(stringr) # work with strings
library(labelled) # use labels
library(gtsummary) # tables
library(gt) # tables
library(ggplot2) #graphs
library(tidyverse) # working with tidy data
library(modelsummary) # creating summary tables
library(stargazer) # writing nice tables
library(RColorBrewer) # color palettes
data_path <- "C:/WBG/GitHub/Tidy_Tuesday-s/10_29"
install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2024-10-29')
data_table <- as.data.table(tuesdata)
library(haven)
library(dplyr)
library(tidyr)
library(stringr)
library(labelled)
library(readxl)
library(data.table)
library(lubridate)
library(tidytuesdayR)
data_table <- as.data.table(tuesdata)
View(tuesdata)
monster_movie_genres <- tuesdata$monster_movie_genres
monster_movies <- tuesdata$monster_movies
data_table2 <- as.data.table(monster_movies)
data_table <- as.data.table(monster_movie_genres)
View(data_table)
View(data_table2)
data_table <- data_table %>% distinct(code, .keep_all=TRUE) # 0 duplicates
data_table <- data_table %>% distinct(tconst, .keep_all=TRUE) # 0 duplicates
data_table2 <- data_table3 %>% distinct(tconst, .keep_all=TRUE) # 2 duplicates
data_table2 <- data_table2 %>% distinct(tconst, .keep_all=TRUE) # 2 duplicates
data_table2[, c("genre_1", "genre_2", "genre_3") := tstrsplit(genres, ";")]
data_table2[, c("genre_1", "genre_2", "genre_3") := tstrsplit(genres, ",")]
View(data_table)
View(data_table2)
join_data_table <- data_table[data_table2, nomatch = 0]
join_data_table <- data_table[data_table2, on = .(tconst), nomatch = 0]
View(join_data_table)
data_table<- as.data.frame(data_table)
data_table2<- as.data.frame(data_table2)
join_data_table<- as.data.frame(join_data_table)
write_dta(data_table, file.path(data_path, "Intermediate/monsters_genres.dta"))
write_dta(data_table, file.path(data_path, "Intermediate/monsters_genres.dta"))
write_dta(data_table, file.path(data_path, "Intermediate/monsters_genres.dta"))
write_dta(data_table, file.path(data_path, "Data/Intermediate/monsters_genres.dta"))
write_dta(data_table2, file.path(data_path, "Data/Intermediate/monster_movies.dta"))
write_dta(join_data_table, file.path(data_path, "Data/Intermediate/join_data.dta"))
setnames(join_data_table, old = names(join_data_table), new = gsub("\\.", "_", names(join_data_table)))
join_data_table<- as.data.frame(join_data_table)
write_dta(join_data_table, file.path(data_path, "Data/Intermediate/join_data.dta"))
View(join_data_table)
data  <- read_dta(file.path(data_path, "Data/Intermediate/monsters_genres.dta"))
data2  <- read_dta(file.path(data_path, "Data/Intermediate/monster_movies.dta"))
data_join  <- read_dta(file.path(data_path, "Data/Intermediate/join_data.dta"))
# customized function:
winsor_function <- function(dataset, var, min = 0.00, max = 0.95){
var_sym <- sym(var)
percentiles <- quantile(
dataset %>% pull(!!var_sym), probs = c(min, max), na.rm = TRUE
)
min_percentile <- percentiles[1]
max_percentile <- percentiles[2]
dataset %>%
mutate(
!!paste0(var, "_w") := case_when(
is.na(!!var_sym) ~ NA_real_,
!!var_sym <= min_percentile ~ percentiles[1],
!!var_sym >= max_percentile ~ percentiles[2],
TRUE ~ !!var_sym
)
)
}
View(data2)
# Winsorize selected variables in the dataset
win_vars <- c("runtime_minutes", "average_rating", "num_votes")
# Apply the custom winsor_function to each variable in win_vars
for (var in win_vars) {
data2 <- winsor_function(data2, var)
}
# Update the labels to reflect that winsorization was applied
data2 <- data2 %>%
mutate(across(ends_with("_w"),
~ labelled(.x, label = paste0(attr(.x, "label"),
" (Winsorized 0.05)"))))
